=List of Datatypes=
Preliminary list as grabbed from the console:
<TABLE background-color=#CCCCCC><TR><TD VALIGN=TOP>
{| cellpadding=1 cellspacing=1
|-
|'''[http://rebol.com/r3/docs/datatypes/action.html action!]'''
|datatype-relative native function (polymorphic)
|-
|'''[http://rebol.com/r3/docs/datatypes/binary.html binary!]'''    
|string series of bytes
|-
|'''bitset!'''
|set of bit flags
|-
|'''block!'''
|series of values
|-
|'''char!'''
|8bit and 16bit character
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''closure!'''
|function with persistent local values (indefinite)
|-
|'''datatype!'''
|datatype value
|-
|'''date!'''
|day, month, year, time of day, and timezone
|-
|'''decimal!'''
|64bit floating point number (IEEE standard)
|-
|'''email!'''
|email address
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''end!'''
|internal marker for end of block
|-
|'''error!'''
|error value
|-
|'''event!'''
|user interface event (efficiently sized)
|-
|'''file!'''
|file name or path
|-
|'''frame!'''
|internal context frame
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''function!'''
|interpreted function (user-defined or mezzanine)
|-
|'''get-path!'''
|the value of a path
|-
|'''get-word!'''
|the value of a word (variable)
|-
|'''gob!'''
|graphical object
|-
|'''handle!'''
|arbitrary internal object or value
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''image!'''
|RGB image with alpha channel
|-
|'''integer!'''
|64 bit integer
|-
|'''issue!'''
|identifying string or script marker
|-
|'''library!'''
|external library reference
|-
|'''lit-path!'''
|literal path value
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''lit-word!'''
|literal word value
|-
|'''logic!'''
|boolean true or false
|-
|'''map!'''
|hashed name-value pairs
|-
|'''module!'''
|loadable context of code and data
|}
</TD><TD VALIGN=TOP>
{|cellpadding=1 cellspacing=1
|-
|'''money!'''
|arbitrary precision decimal numbers (denominations)
|-
|'''native!'''
|direct CPU evaluated function
|-
|'''none!'''
|no value represented
|-
|'''object!'''
|context of names with values
|-
|'''op!'''
|infix operator (special evaluation exception)
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''pair!'''
|two dimensional point or size
|-
|'''paren!'''
|automatically evaluating block
|-
|'''path!'''
|refinement path for functions, objects, files, etc.
|-
|'''percent!'''
|special form of decimals (used mainly for layout)
|-
|'''port!'''
|external series, an I/O channel
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''rebcode!'''
|virtual machine function
|-
|'''refinement!'''
|variation of meaning or location
|-
|'''routine!'''
|external library function
|-
|'''set-path!'''
|definition of a path's value
|-
|'''set-word!'''
|definition of a word's value
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''string!'''
|string series of characters
|-
|'''struct!'''
|native structure definition
|-
|'''tag!'''
|markup string (HTML or XML)
|-
|'''task!'''
|evaluation environment
|-
|'''time!'''
|time of day or duration
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|style="valign=top"|'''tuple!'''
|integers sequence (colors, versions, IP addresses)
|-
|'''typeset!'''
|set of datatypes
|-
|'''unicode!'''
|string of unicoded characters
|-
|'''unset!'''
|no value returned or set
|-
|'''url!'''
|uniform resource locator or identifier
|-
|style="background-color: #CCCCCC" |
|style="background-color: #CCCCCC" |
|-
|'''utype!'''
|user defined datatype
|-
|'''vector!'''
|multideminsional directly mapped arrays (of same datatype)
|-
|'''word!'''
|word (symbol or variable)
|}
</TD></TR></TABLE>

=Arranged List of Datatypes=
All datatypes except end! are arranged in typesets.

==end!==


==any-type!==

'''any-type! is  typeset of all of these datatypes:'''
<TABLE CELLPADING=2 CELLSPACING=1><TR><TD WIDTH=11%>
unset!<BR> none!<BR> logic!<BR> integer!<BR>decimal!<BR>percent!
</TD><TD WIDTH=11%>
money!<BR>char!<BR> pair!<BR>tuple!<BR>time!<BR>date!
</TD><TD WIDTH=11%>
string!<BR> binary!<BR> file!<BR>email!<BR>url!<BR>tag!
</TD><TD WIDTH=11%>
issue!<BR>bitset!<BR> unicode!<BR>vector!<BR>image!<BR>block!
</TD><TD WIDTH=11%>
paren!<BR> map!<BR> path!<BR> set-path!<BR>get-path!<BR>lit-path!
</TD><TD WIDTH=11%>
datatype!<BR> typeset!<BR>word!<BR>set-word!<BR>get-word!<BR>lit-word!
</TD><TD WIDTH=11%>
refinement!<BR> native!<BR>action!<BR>routine!<BR>rebcode!<BR>op!
</TD><TD WIDTH=11%>
closure!<BR> function!<BR> frame!<BR>object!<BR>module!<BR>error!
</TD><TD WIDTH=11%>
task!<BR>port!<BR>gob!<BR>event!<BR>handle!<BR>struct!
</TD><TD WIDTH=11% VALIGN=TOP>
library!<BR> utype!
</TD></TR></TABLE>
===unset!===

No value returned or set. The functions GET and SET have special treatment of unset! values with their /any refinements:

<pre>
set/any 'a #[unset!]
get/any 'a
</pre>

If functions should be allowed to handle unset! arguments, it should be specified with either unset! or any-type!:

<pre>
f: func [value [unset!]] [ ... ]
f: func [value [any-type!]] [ ... ]
</pre>

===none!===

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''value'''
|#[none]
|}

===logic!===

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''value'''
|#[true]
|-
|'''value'''
|#[false]
|}

<pre>
>> to integer! true
== 1
>> to integer! false
== 0
</pre>

{|border="1" cellpadding="5" cellspacing="0"
|+ Predefined logics
! Word || Value
|-
|false || #[false]
|-
|no || #[false]
|-
|off || #[false]
|-
|true || #[true]
|-
|yes || #[true]
|-
|on || #[true]
|}

===scalar!===

A typeset of:

integer! decimal! percent! money! char! pair! tuple! time!


====number!====

'''A typeset of:

=====integer!=====

=====decimal!=====

=====percent!=====

{|border="1" cellpadding="5" cellspacing="0"
! bgcolor=silver|  
! bgcolor=silver|integer! 
! bgcolor=silver|decimal!
!bgcolor=silver |percent!
|-
|'''Minimum'''
|align="right"| -9'223'372'036'854'775'808
|align="right"| -1.797'693'134'862'315'7E+308
|align="right"| -1.797'693'134'862'315'7E+310%
|-
|'''Maximum'''
|align=right|9'223'372'036'854'775'807
|align=right|1.797'693'134'862'315'7E+308
|align="right"|1.797'693'134'862'315'7E+310%
|-
|'''Minimal positive normalized'''
|
|align="right"| 2.225'073'858'507'201'4E-308
|align="right"| 2.225'073'858'507'201'4E-306%
|-
|'''Maximal positive denormalized'''
|
|align="right"| 2.225'073'858'507'200'9E-308
|align="right"| 2.225'073'858'507'200'9E-306%
|-
|'''Minimal positive denormalized'''
|
|align="right"| 4.940'656'458'412'465'4E-324
|align="right"| 4.940'656'458'412'465'4E-322%
|-
|'''Maximal negative normalized'''
|
|align="right"| -2.225'073'858'507'201'4E-308
|align="right"| -2.225'073'858'507'201'4E-306%
|-
|'''Minimal negative denormalized'''
|
|align="right"| -2.225'073'858'507'200'9E-308
|align="right"| -2.225'073'858'507'200'9E-306%
|-
|'''Maximal negative denormalized'''
|
|align="right"| -4.940'656'458'412'465'4E-324
|align="right"| -4.940'656'458'412'465'4E-322%
|}

<pre>
>> min-integer: to integer! #{8000 0000 0000 0000}
== -9223372036854775808
>> max-integer: to integer! #{7FFF FFFF FFFF FFFF}
== 9223372036854775807
</pre>

====money!====

{|border="1" cellpadding="5" cellspacing="0"
|-
! bgcolor=silver | 
! bgcolor=silver | money!
|-
|'''Minimum'''
|align="right"| -$99'999'999'999'999'999'999'999'999e127
|-
|'''Maximum'''
|align="right"| $99'999'999'999'999'999'999'999'999e127
|-
|'''Minimal positive'''
| $1e-128
|-
|'''Maximal negative'''
| -$1e-128
|}

====char!====

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''Minimum'''
|#"^(00)"
|-
|'''Maximum'''
|#"^(FFFF)"
|}

<pre>
>> min-char: to char! 0
== #"^@"
>> max-char: to char! 65535
== #"?"
</pre>

====pair!====

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''Minimum'''
|align="center"| -2147483648x-2147483648
|-
|'''Maximum'''
|align="center"| 2147483647x2147483647
|}

<pre>
>> min-pair: as-pair to integer! #{8000 0000} to integer! #{8000 0000}
== -2147483648x-2147483648
>> max-pair: as-pair to integer! #{7FFF FFFF} to integer! #{7FFF FFFF}
== 2147483647x2147483647
</pre>


====tuple!====

{|border="1" cellpadding="5" cellspacing="0"
!bgcolor=silver |
!bgcolor=silver | tuple!
|-
|'''Minimum'''
|0.0.0 ...
|-
|'''Maximum'''
|255.255.255 ...
|}

====time!====

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''Minimum'''
|align="right"| -596523:14:07.999999999
|-
|'''Maximum'''
|align="right"| 596523:14:07.999999999
|}

<pre>
>> min-time: (to time! to integer! #{8000 0001}) - 0.999999999
== -596523:14:07.999999999
>> max-time: (to time! to integer! #{7FFF FFFF}) + 0.999999999
== 596523:14:07.999999999
</pre>


===date!===

{|border="1" cellpadding="5" cellspacing="0"
|-
|'''Minimum'''
|1-Jan-0000
|-
|'''Maximum'''
|31-Dec-16383
|}


===[[Mathematical model of Rebol series | series!]]===

A typeset of:

string! binary! file! email! url! tag! issue! unicode! vector! block! paren! path! set-path! get-path! lit-path!


====any-string!====

A typeset of:

string! binary! file! email! url! tag! issue!

=====string!=====

=====binary!=====

=====file!=====

=====email!=====

=====url!=====

=====tag!=====

=====issue!=====

====unicode!====

====vector!====

====any-block!====

A typeset of:

block! paren! path! set-path! get-path! lit-path!

=====block!=====

=====paren!=====

=====path!=====

=====set-path!=====

=====get-path!=====

=====lit-path!=====

===bitset!===

===image!===

<pre>
img: make image! 320x240
img/size  ;== 320x240
img/rgb   ;== #{00000000...
img/alpha ;== #{00000000...
</pre>

Note: if you want to make image transparent use:

<pre>
img/alpha: 255
</pre>

(using change and other series manipulations on alpha channel will not work!)


To draw into image you can use something like:

<pre>
draw img [pen 255.0.0 line 0x0 320x240]
view layout [image img]
</pre>

You can also create image using binary data directly, like:

<pre>
img: make image! reduce [4x1 as-binary "Hello world!"]
probe as-string img/rgb ;== "Hello world!"
view layout [image img 200x80]
</pre>


[[images/Hello-world-encoded-as-an-image.png|No Description]]

If you have raw RGBA binary data, you can create image! from it using:

<pre>
img: to image! #{FFFFFFC0000000C0}
view layout [image img 200x100]
</pre>

[[images/To-image-example-result.png|No Description]]

Another note:
In Rebol2 you have to use:

<pre>
view layout [image img]
</pre>

... but in Rebol3 (alpha version) you can use just:

<pre>
view [image img]
</pre>

... but it would be nice to have chance to do just:

<pre>
view img
</pre>

... which is easy to add and it's already submited as a wish.

===map!===

===datatype!===

===typeset!===


===any-word!===

A typeset of:

word! set-word! get-word! lit-word! refinement!


====word!====

====set-word!====

====get-word!====

====lit-word!====

====refinement!====


===any-function!===

A typeset of:

native! action! routine! rebcode! op! closure! function!


====native!====

====action!====

====routine!====

====rebcode!====

====op!====

====closure!====

====function!====

===frame!===

===any-object!===

A typeset of:

====object!====

====module!====

====error!====

====task!====

====port!====

===gob!===

===event!===

===handle!===

===struct!===

===library!===

===utype!===