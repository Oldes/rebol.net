{{Cookbook|title=Porting R3 to another OS|author=Unknown|level=3|category=System}}

==Startup==

This is what's happening at startup, when a user run a Rebol exe:

*exe loads the R3 core dll.
*exe calls R3 core init functions.
*exe passes to R3 a table of callback functions in its OS-dependent layer

==OS Callbacks==

The file src/include/host-lib.h show the list of OS dependent callback functions.

<pre>
extern void *OS_Make(size_t size);    // host-lib.c
extern void OS_Free(void *mem);    // host-lib.c
extern void OS_Exit(int code);    // host-lib.c
extern void OS_Crash(const char *title, const char *content);    // host-lib.c
extern char *OS_Form_Error(int errnum, char *str, int len);    // host-lib.c
extern BOOL OS_Get_Boot_Path(char *name);    // host-lib.c
extern char *OS_Get_Locale(int what);    // host-lib.c
extern char *OS_Get_Env(char *var, int mode);    // host-lib.c
extern int OS_Set_Env(char *expr, int mode);    // host-lib.c
extern void OS_Get_Time(Rebol_DAT *dat);    // host-lib.c
extern i64 OS_Delta_Time(i64 base);    // host-lib.c
extern char *OS_To_Rebol_Path(char *path, int *len);    // host-lib.c
extern char *OS_To_Local_Path(char *path, int *len);    // host-lib.c
extern int OS_Get_Current_Dir(char **lpath);    // host-lib.c
extern BOOL OS_Set_Current_Dir(char *lpath);    // host-lib.c
extern void OS_File_Time(REBREQ *file, Rebol_DAT *dat);    // host-lib.c
extern void *OS_Open_Library(REBCHR *path, REBCNT *error);    // host-lib.c
extern void OS_Close_Library(void *dll);    // host-lib.c
extern void *OS_Find_Function(void *dll, char* funcname);    // host-lib.c
extern REBINT OS_Create_Thread(CFUNC init, void *arg, REBCNT stack_size);    // host-lib.c
extern void OS_Delete_Thread(void);    // host-lib.c
extern void OS_Task_Ready(REBINT tid);    // host-lib.c
extern int OS_Create_Process(char *call, int reserved);    // host-lib.c
extern int OS_Browse(char *url, int reserved);    // host-lib.c
extern BOOL OS_Request_File(REBRFR *fr);    // host-lib.c
extern BOOL OS_Form_Decimal(REBDCS *specs);    // host-lib.c
extern int OS_Call_Device(REBINT device, REBCNT command);    // ../host-device.c
extern int OS_Do_Device(REBREQ *req, REBCNT command);    // ../host-device.c
extern REBREQ *OS_Make_Devreq(int device);    // ../host-device.c
extern int OS_Abort_Device(REBREQ *req);    // ../host-device.c
extern int OS_Poll_Devices(void);    // ../host-device.c
extern REBINT OS_Wait(REBCNT millisec);    // ../host-device.c
extern void OS_Init_Graphics(REBGOB *gob);    // host-window.c
extern void OS_GUI_Metrics(Rebol_OS_METRICS *met);    // host-window.c
extern REBINT OS_Show_Gob(REBGOB *gob);    // host-window.c
extern void OS_Map_Gob(REBGOB **gob, REBPAR *xy, REBOOL inner);    // host-window.c
extern REBINT OS_Size_Text(REBGOB *gob, REBPAR *size);    // host-window.c
extern REBINT OS_Offset_To_Caret(REBGOB *gob, REBPAR xy, REBINT *element, REBINT *position);    // host-window.c
extern REBINT OS_Caret_To_Offset(REBGOB *gob, REBPAR *xy, REBINT element, REBINT position);    // host-window.c
extern REBINT OS_Gob_To_Image(REBSER *image, REBGOB *gob);    // host-window.c
extern REBINT OS_Draw_Image(REBSER *image, REBSER *block);    // host-window.c
extern REBINT OS_Effect_Image(REBSER *image, REBSER *block);    // host-window.c
extern void OS_Cursor_Image(REBINT n, REBSER *image);    // host-window.c
</pre>

===POSIX===

The following are OS callback functions, that are ok within the POSIX standard, meaning they are easy to port to an OS, that apply to the POSIX standard.

====Make====

Allocate memory of given size.

====Free====

Free memory allocated in this OS environment. (See OS_Make)

====Exit====

Called in cases where Rebol needs to quit immediately without returning from the main() function.

====Crash====

Tell user that Rebol has crashed. This function must use the most obvious and reliable method of displaying the crash message.

====Form_Error====

Translate OS error into a string.

====Get_Boot_Path====

Used to determine the program file path for Rebol. This is the path stored in system->options->boot and it is used for finding default boot files.

====Get_Locale====

Used to obtain locale information from the system.

====Get_Env====

Get a value from the environment.

====Set_Env====

Set a value to the environment.

====Get_Time====

Get the current system date and time.

====Delta_Time====

Return the number of milliseconds since last called.

====To_Rebol_Path====

Convert local filename to a Rebol filename.

====To_Local_Path====

Convert Rebol filename to a local filename.

====Get_Current_Dir====

Return the current directory path as a string.

====Set_Current_Dir====

Set the current directory to local path.

====File_Time====

Convert file.time to Rebol date/time format.

====Open_Library====

Load a DLL library and return the handle to it.

====Close_Library====

Free a DLL library opened earlier.

====Find_Function====

Get a DLL function address from its string name.

====Create_Thread====

Creates a new thread for a Rebol task datatype.

====Delete_Thread====

Can be called by a Rebol task to terminate its thread.

====Task_Ready====

Used for new task startup to resume the thread that launched the new task.

====Create_Process====

====Browse====

====Request_File====

===OS Independent===

OS independent callback functions:

====Call_Device====

Shortcut for non-request calls to device.

====Do_Device====

Tell a device to perform a command.

====Make_Devreq====

====Abort_Device====

Ask device to abort prior request.

====Poll_Devices====

Poll devices for activity.

====Wait====

Check if devices need attention, and if not, then wait.

===Windowing Interface===

====Init_Graphics====

Initialize graphics subsystem. Store Gob_Root.

====GUI_Metrics====

Provide info about the hosting GUI.

====Show_Gob====

Can be called with NONE (0), Gob_Root (All), or a specific gob to open, close, or refresh.

====Map_Gob====

Map GOB and offset to inner or outer GOB and offset.

====Size_Text====

Return the area size of the text.

====Offset_To_Caret====

Return the element and position for a given offset pair.

====Caret_To_Offset====

Return the offset pair for a given element and position.

====Gob_To_Image====

Render gob into an image.

====Draw_Image====

Render DRAW dialect into an image.

====Effect_Image====

Render EFFECT dialect into an image.

====Cursor_Image====

(Set the cursor image.)

==Devices==

===System===

===StdIO===

===Console===

===File===

===Event===

===Net===

===DNS===

===Clipboard===

==Directory Tree==

===make/===

Makefiles, dll defs, dll lib files

====agg/====

Anti-Grain Geometry

====lib/====

====osx/====

Apple OS X

=====objs/=====

Object files (.o)

====rebhost/====

===src/===

Source files, includes, lib sources

====boot/====

====include/====

Include files

====lib/====

Library source files

=====agg/=====

Anti-Grain Geometry

=====compositor/=====

====mezz/====

Rebol mezzanines

====os/====

OS dependent source files

=====posix/=====

Source files applying to the POSIX standard

=====temp/=====

=====win32/=====

====tools/====

Tools to be used in the building process
(Rebol scripts)

==make==

Ways to call make:

===build===

Builds R3.

<pre>
make build
</pre>

===rebuild===

Creates necessary Rebol script(s) and builds R3.

<pre>
make rebuild
</pre>

===clean===

Removes object files and rebuild.

<pre>
make clean
</pre>

===prep===

Prepare building process by creating necessary Rebol script(s).

<pre>
make prep
</pre>

===make===

Creates the makefile and perform a clean build.

<pre>
make make
</pre>

===all===

Cleans object files directory, copies dll and builds R3.

<pre>
make all
</pre>

===getlib===

Copies dll.

<pre>
make getlib
</pre>

==Cookbook References==

{{:Cookbook References}}