Building a mental model of a language is easiest if there are rules you can use for grounding.  It is useful to know what are rules, and what aren't rules.

= TO conversions =

Rebol uses the TO function in order to convert one type to another.  Its first parameter is the type you want to convert to, and the second parameter is the source value.

<pre>
>> to integer! "42"
== 42

>> to date! "1-Jan-2010"  
== 1-Jan-2010

>> to block! <a href="http://rebol.com">
== [<a href="http://rebol.com">]
</pre>

There are convenience functions for each type which are a hyphenation of the word TO and the type without its exclamation mark:

<pre>
>> to-integer "42"
== 42

>> to-date "1-Jan-2010"  
== 1-Jan-2010

>> to-block <a href="http://rebol.com">
== [<a href="http://rebol.com">]
</pre>

== Success and Failure ==

=== Not all TO conversions will succeed ===

Some target types are too narrow to express an arbitrary value of the source type, which means conversions will not always succeed:

<pre>
>> to-integer "Hello"      
** Script error: cannot MAKE/TO integer! from: "Hello"
** Where: to to-integer
** Near: to integer! :value

>> to-date "99-Apr-9999" 
** Script error: cannot MAKE/TO date! from: "99-Apr-9999"
** Where: to to-date
** Near: to date! :value
</pre>

== One-Way Conversions ==

The ability to successfully convert from one type to another does not mean that converting back will give the original input.  Here are some examples.

=== STRING! via DATE! ===

A wide variety of input formats are supported for dates, yet there is only one default output format:

<pre>
>> to-string to-date "1-1-2009"
== "1-Jan-2009"
</pre>

This default is the ISO standard covering the exchange of date and time-related data ([http://en.wikipedia.org/wiki/ISO_8601 ISO-8601]).

=== BLOCK! via STRING! ===

In the first step of the conversion (from block to string), the words in the block are converted to strings using FORM and then the strings are concatenated together.  But there are no spaces between the words of the block - the spaces that appear to be there are really just artifacts of Rebol syntax, not really there once the value is loaded.  So the resulting string is <tt>"abc"</tt>.

<pre>
>> to-string [a b c]
== "abc"
</pre>

Then TO-BLOCK of that string effectively treats the string as Rebol syntax - a special case of TO-BLOCK for STRING! and BINARY! input.  

<pre>
>> to-block to-string [a b c]
== [abc]
</pre>

This results in the word <tt>'abc</tt> in the block.

=== Other Types via BLOCK! ===

TO-BLOCK of a value other than the special cases of STRING! and BINARY! simply wraps the value in a block.  Let's see this with content <tt><nowiki>a href="http://rebol.com"</nowiki></tt> (the angle brackets are part of the syntax, but not actually in the series data):

<pre>
>> to-block <a href="http://rebol.com">
== [<a href="http://rebol.com">]
</pre>

TO-TAG treats that block like TO-STRING does.  The reason is that they use the same code, which is to FORM the contents of the block and then concatenate them. 

<pre>
>> to-tag to-block <a href="http://rebol.com">
== <<a href="http://rebol.com">>
</pre>

Our result is a TAG! whose contents literally have a set of angle brackets inside of it: <tt><nowiki><a href="http://rebol.com"></nowiki></tt>. The syntax of the tag! type then displays that value with ''another'' pair of angle brackets around it.

== Reversible Conversions ==

In the following sections, we define a ''reversible conversion'' of a <tt>value</tt> by way of an <tt>intermediate-type</tt> in the following way:

<pre>
reversible-conversion: func [value intermediate-type /weak /local value-type result] [
    value-type: type? value
    result: TO value-type TO intermediate-type value
    either weak [
        if any-word? result [
            assert [none = bind? result]
        ]
        return value = result
    ] [
        return value == result
    ]
]
</pre>

For the default, we use the <tt>==</tt> (aka STRICT-EQUAL?) operator so that case sensitivity and binding are taken into account.  If we use the <tt>/weak</tt> refinement then we use the <tt>=</tt> (a.k.a. EQUALS?) operator, which is more lax:

<pre>
>> "AbCdE" = "ABCDE"
== true
</pre>

(You can read more about the equality heirarchy in the [[Comparisons]] article.)

=== ANY-STRING! via ANY-STRING! ===

<pre>
if (any-string? value) and (find any-string! intermediate-type) [
    assert [reversible-conversion value intermediate-type]
]
</pre>

=== ANY-WORD! via ANY-WORD! ===

<pre>
if (any-word? value) and (find any-word! intermediate-type) [
    assert [reversible-conversion value intermediate-type]
]
</pre>

=== DATE! via ANY-STRING! ===

<pre>
if (date? value) and (find any-string! intermediate-type) [
    assert [reversible-conversion value intermediate-type]
]
</pre>

=== ANY-WORD! *weak* via ANY-STRING! ===

Both words and strings contain character data, but there are some strings that aren't legal words.  Words cannot have spaces or colons in them, for example.  Yet converting from an ANY-WORD! into an ANY-STRING! and back preserves the spelling of the word in a weak sense:

<pre>
if (any-word? value) and (find any-string! intermediate-type) [
    assert [reversible-conversion/weak value intermediate-type]
]
</pre>

Do note that for most uses of words, one of their most important attributes is their [[Bindology|binding]].  This conversion loses that.

= Reflection =

It is important to bear in mind that the structures which can be specified through Rebol's source notation are a subset of what can be constructed at runtime.  To see an example of this, note that executing the following Rebol code builds a structure with an aliased block:

<pre>
>> foo: [a]
== [a]

>> bar: reduce [foo foo]
== [[a] [a]]

>> append first bar 'b
== [a b]

>> probe bar
== [[a b] [a b]]
</pre>

Had you simply defined bar in source as <tt>[[a] [a]]</tt> it would lead to an object that looks like it has the same structure, but it behaves differently:

<pre>
>> bar: [[a] [a]]
== [[a] [a]]

>> append first bar 'b
== [a b]

>> probe bar
== [[a b] [a]]
</pre>

There tend to be limits to what can be specified as literal declarative values, and Rebol is not a declarative language.  The native way of specifying runtime values is through specifying the procedural code that should be run to construct them in memory.  

Some other examples of information that isn't possible to concretize as source include binding information, series positions, and object references.

=== a string that can LOAD will SAVE back to a string that will LOAD to an equivalent structure  ===

The following is true for any string with no serialized syntax in it:

<pre>
assert [string? str]

wasValidRebol: try/except [
    structure: load str
    true
] [
   ; not all strings will successfully LOAD
   false
]

if wasValidRebol [
    strFromStructure: copy ""
    save strFromStructure value

    ; uncertain if this is true...?
    comment [
         assert [str = trim/lines strFromStructure] 
    ]

    ; but this is, correct?
    assert [structure = load strFromStructure]
]
</pre>