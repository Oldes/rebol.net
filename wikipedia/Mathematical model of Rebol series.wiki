==Introduction==

Rebol series like strings and blocks incorporate:

* fast index access

* methods for traversing and skipping

* built-in bounds checking

This article:

* defines a mathematical model of Rebol series
* discusses the current state of the interpreter
* proposes changes

==Mathematical model of Rebol series==

'''Definition:''' we say that a mathematical function <code>S</code> is a ''Rebol series'' if:

* <code>S('datatype)</code> is one of the series! datatypes (series! datatypes are: string!, binary!, block!, ...),

* <code>S('displacement)</code> is a 32-bit signed integer, i.e., an integer value such that <code>-2147483648 <= S('displacement) <= 2147483647</code>,

* and <code>S('payload)</code> is a payload.

'''Note:''' in the model, the series displacement is defined as a 32-bit signed integer, since in current interpreter versions, skips, offsets, etc. are implemented using 32-bit signed integers.

===Payload===

'''Definition:''' we say that mathematical function <code>D</code> is a ''payload'' if for every invocation time <code>t</code>:

* the value <code>D(t,'size)</code> is a nonnegative 32-bit signed integer value, i.e., <code>0 <= D(t,'size) <= 2147483647</code>,

* and for every 32-bit signed integer index <code>i</code> holds:

** <code>D(t,i) = #[none]</code> if <code>i < 0</code>,

** <code>D(t,i)</code> is a Rebol value if <code>0 <= i < D(t,'size)</code>,

** and <code>D(t,i) = #[none]</code> if <code>D(t,'size) <= i</code>

'''Notes:'''

* The payload is time-dependent, meaning that the results depend on the time of invocation.

* <code>D(t,'size) = 0</code> is allowed, in which case we say that the payload is empty.

* For the same reasons as above it makes sense to use 32-bit signed integers for payload size, and since negative sizes do not make sense, only nonnegative numbers are allowed.

'''Convention:''' from now on, unless otherwise stated, symbol <code>t</code> will denote the invocation time, i.e., the time when the given function is invocated.

===The head of a series===

The <code>head</code> function is a function accepting a Rebol series <code>S</code> and returning its head.

We define the ''head'' of a series as a series having a zero displacement and the same datatype and payload as the given series:

* <code>head(S)('displacement) = 0</code>
* <code>head(S)('datatype) = S('datatype)</code>
* <code>head(S)('payload) = S('payload)</code>

Note that the <code>head</code> function is time-independent.

===Finding out whether a series is at its head===

The <code>at-head?</code> function is a function accepting a Rebol series. It returns a logic value determining whether the given series is its own head:

* <code>at-head?(S) = #[true]</code> if <code>S('displacement) = 0</code>,

* and <code>at-head?(S) = #[false]</code> if <code>S('displacement) <> 0</code>.

Note that the <code>at-head?</code> function is time-independent.

===Finding out whether a series is at a pre-head position===

The <code>pre-head?</code> function is a function accepting a Rebol series. It returns a logic value determining whether the series is at a pre-head position:

* <code>pre-head?(S) = #[true]</code> if <code>S('displacement)</code> is negative,

* and <code>pre-head?(S) = #[false]</code> if <code>S('displacement)</code> is nonnegative.

Note that the <code>pre-head?</code> function is time-independent.

===The tail of a series===

The <code>tail</code> function is a function accepting a Rebol series. It returns the ''tail'' of the given series, i.e., a series having the same datatype and payload as the given series, and a displacement equal to the size of the payload of the given series at the time of the invocation:

* <code>tail(t,S)('datatype) = S('datatype)</code>,

* <code>tail(t,S)('payload) = S('payload)</code>,

* and <code>tail(t,S)('displacement) = S('payload)(t,'size)</code>.

Note that as opposed to the <code>head</code> function, the <code>tail</code> function is time-dependent.

===Finding out whether a series is at its tail===

The <code>at-tail?</code> function is a function accepting a Rebol series. It returns a logic value determining whether the given series is at its tail at the time of the invocation:

* <code>at-tail?(t,S) = #[true]</code> if <code>S('displacement) = S('payload)(t,'size)</code>,

* and <code>at-tail?(t,S) = #[false]</code> if <code>S('displacement) <> S('payload)(t,'size)</code>.

Note that the <code>at-tail?</code> function is time-dependent.

===Finding out whether a series is at a past-tail position===

The <code>past-tail?</code> function is a function accepting a Rebol series. It returns a logic value determining whether the given series is at a past-tail position at the time of the invocation:

* <code>past-tail?(t,S) = #[true]</code> if <code>S('displacement) > S('payload)(t,'size)</code>,

* and <code>past-tail?(t,S) = #[false]</code> if <code>S('displacement) <= S('payload)(t,'size)</code>.

Note the <code>past-tail?</code> function is time-dependent.

===Finding out whether a series is empty===

The <code>is-empty?</code> function is a function accepting a Rebol series. It yields a logic! type value determining whether the given series is empty at the time of the invocation:

* <code>is-empty?(t,S) = #[true]</code> if <code>max(0,S('displacement)) < S('payload)(t,'size)</code>,

* and <code>is-empty?(t,S) = #[false]</pre> if <code>max(0,S('displacement)) >= S('payload)(t,'size)</code>.

Note that the <code>is-empty?</code> function is time-dependent.

===Determining the length of a series===

The <code>length-of</code> function is a function accepting a Rebol series. It returns a nonnegative integer determining the length of the given series at the time of the invocation:

<pre>
length-of(t,S) = max(0,S('payload)(t,'size) - max(0,S('displacement)))
</pre>

Note that the <code>length-of</code> function is time-dependent.

===Index arithmetic===

====Least Absolute Remainder====

For integer <code>a</code> and nonzero integer <code>b</code> we define

<code>r = LAR(a,b)</code> (read: "<code>r</code> is the Least Absolute Remainder of <code>a</code> divided by <code>b</code>") if

* <code>a - r</code> is divisible by <code>b</code>,

* and <code>-abs(b) <= r + r < abs(b)</code>,

Where <code>abs</code> is the absolute value.

====32-bit signed arithmetic with wrapping====

For integer <code>a,b</code> we define

<code>add-wrap(a,b) = LAR(a + b,2 ** 32)</code>,

and <code>subtract-wrap(a,b) = LAR(a - b,2 ** 32)</code>.

Advantages if the two's complement representation is used:

* both functions accept any pair of 32-bit signed integers and yield a 32-bit signed integer as a result

* for every pair of 32-bit signed integers <code>a,b</code> holds that

<pre>
a = add-wrap b subtract-wrap a b
</pre>

'''Notes:'''

* For example, the gcc does not offer any other representation of signed integers than two's complement.

* The advantage of the two's complement representation compared to one's complement or sign/magnitude representations are that the two's complement is the only representation capable of representing all least absolute remainders of division by <code>2 ** 32</code>, i.e., it is the only representation for which the <code>LAR</code> function and the wrapping addition and subtraction always yield a representable 32-bit integer.

====Determining the offset between two series====

Sometimes it is useful to know the offset between two series. If the displacements of the series are signed 32-bit numbers, it is possible to calculate the offset as a signed 32-bit number too, using the formula:

<pre>
offset-of(S,T) = subtract-wrap(T('displacement),S('displacement))
</pre>

Note that the <code>offset-of</code> function is time-independent.

====Determining the payload index====

Given a series <code>S</code> and and and index <code>i</code>, the task is to calculate a <code>payload-index(S,i)</code> value such that the <code>i</code>-th position in <code>S</code> corresponds to the <code>payload-index(S,i)</code>-th position in its payload.

The function can be used to define the <code>pickz</code> function. However, this is not the only use of such a function. It would be useful for other indexing purposes as well.

It turns out that the simplest definition is:

<pre>
payload-index(S,i) = add-wrap(S('displacement),i)
</pre>

Note that the <code>payload-index</code> function is time-independent.

===Picking values===

A simple <code>pickz</code> function:

<pre>
pickz(t,S,i) = S('payload)(t,payload-index(S,i))
</pre>

Note that the <code>pickz</code> function is time-dependent, i.e., that its result depends on the time of the invocation.

==Implementations==

===Displacement===

In Rebol, there is no direct method to examine the displacement. However, there are numerous indirect informations we can use:

* Rebol interpreters are implemented in C, i.e., C is the native code of the interpreter.

* It is known that for indexing purposes Rebol uses signed 32-bit integers as many indexing functions in Rebol suggest.

* Rebol 2.7.8 can construct pre-head series like <code>#[block! [1] -1]</code>, which suggests that the displacement should be a signed integer.

* Suppose that in Rebol 2.7.8 there is a native 32-bit signed displacement which is examined by the <code>index?</code> function, and that the function usually returns the displacement increased by 1. Since the smallest signed integer in two's complement is -2147483648, it is logical to expect -2147483647 to be the smallest value obtainable as a result of the <code>index?</code> function. And, indeed, in Rebol 2.7.8 <code>index? #[block! [1] -2147483647] ; == -2147483647</code>, while <code>index? #[block! [1] -2147483648] ; == 2</code>, which signals that there is some kind of arithmetic overflow present in the latter case.

* The past-tail series can not only be created, but, in accordance with the mathematical model, their creation cannot be suppressed (Series have time-independent displacement and time-dependent payload, which can shrink.) This does not hold just for the mathematical model, but it also turns out to be true both in Rebol 2.7.8 and in Rebol 2.101.0:

<pre>
a: [1 2]
b: skip a 2
mold/all b ; == #[block! [1 2] 3]
clear a
mold/all b ; == #[block! [] 3]
</pre>

* Handling of past-tail series has several inconsistencies:

** While <code>mold/all</code> handles past-tail series correctly, <code>mold</code> errors on them in Rebol 2.7.8. This leads to interpreter crashes when <code>mold</code> is used to print error causing code. In Rebol 2.101.0 this error has been corrected. Example of error: <code>error? try [mold b] ; == true</code>

** In Rebol 2.7.8 as well as in Rebol 2.101.0, the <code>index?</code> function truncates past-tail indices to tail indices, which is another inconsistent behaviour, since there always is a way how to determine the correct (untruncated) value.

** In Rebol 2.7.8 as well as in Rebol 2.101.0, the <code>load</code> function truncates past-tail indices to tail indices, which is inconsistent with the behaviour of the <code>mold</code> function. Example: <code>mold/all load "#[block! [] 3]" ; == "[]"</code>

* In Rebol 2.101.0, the <code>load</code> function always truncates negative indices in construction syntax to tail. Example: <code>mold/all #[block! [1] -1] ; == "#[block! [1] 2]"</code>

* The fact that Rebol 2.101.0 always truncates negative indices in construction syntax to tail suggests that Rebol 2.101.0 considers them to be greater than positive 32-bit numbers (positive indices are truncated to tail only when they are greater than the payload size). This would happen if Rebol 2.101.0 handled the negative indices as unsigned "under the hood". On one hand, this suggests that the assumption in the mathematical model that the displacement is a signed integer is not valid for Rebol 2.101.0. Due to unsigned displacement, pre-head positions were suppressed in Rebol 2.101.0. On the other hand, this makes the design of Rebol 2.101.0 inconsistent with the usage of signed numbers in the construction syntax, and in series functions such as <code>pick</code>. This is also inconsistent with the handling of past-tail series (As opposed to pre-head positions, past-tail positions cannot be suppressed in this way.)

====Pre-head and past-tail positions====

As discussed above, past-tail positions cannot be suppressed. It is also not possible to suppress the detection of past-tail positions. For consistency, (not just between pre-head and past-tail handling, but also with functions accepting a signed index such as <code>pick</code>) it appears to be best to acknowledge not just the existence of past-tail positions, but also the existence of pre-head positions. The acknowledgment does not just improve consistency, it also improves flexibility and can simplify indexing:

Assume that a user wants to use a series of values <code>[d e]</code> indexed by numbers in the <code>[3..4]</code> range. To be able to do it using the Rebol 2.100.111 interpreter the user needs to define:

<pre>
my-series: [#[none] #[none] d e]
</pre>

Now:

<pre>
pick my-series 3 ; == d
pick my-series 4 ; == e
</pre>

In Rebol 2.7.8 the following works:

<pre>
index? my-series: #[block! [d e] -1] ; == -1
pick my-series 3 ; == d
pick my-series 4 ; == e
</pre>

Comparing the two alternatives we see that in Rebol 2.7.8 using pre-head series, we did not have to insert the extraneous <code>#[none]</code> values to the block to achieve the desired effect. Thus, in addition to consistency, the approach acknowledging the existence of pre-head series turns out to be more flexible.

===Head series===

Tests suggest that the <code>head</code> model function is equivalent to the <code>head</code> function implemented in both Rebol 2.7.8 and Rebol 2.101.0 interpreters.

===Is a series a head?===

Comparing the <code>at-head?</code> model function to the <code>head?</code> function, we find out that:

* In Rebol 2.7.8, the <code>head?</code> function is time-dependent

<pre>
a: [1 2]
b: skip a 2
head? b ; == false
clear a
same? b head b ; == false
head? b ; == true
insert a [1 2]
head? b ; == false
</pre>

* If we take the <code>head</code> function as the definition of the head, the <code>head?</code> function in Rebol 2.7.8 is incorrect. To be correct, it should work like the <code>at-head?</code> function.

* In Rebol 2.101.0 the <code>head?</code> function appears to be equivalent to the <code>at-head?</code> model function.

===Tail series===

Tests suggest that the <code>tail</code> model function is equivalent to the <code>tail</code> function implemented in the Rebol 2.7.8 interpreter as well as in the Rebol 2.101.0 interpreter.

===Is a series a tail?===

Comparing the <code>at-tail?</code> model function to the <code>tail?</code> function, we find out that for Rebol 2.7.8 as well as for Rebol 2.101.0:

* If we take the <code>tail</code> function as the definition of the tail, the <code>tail?</code> function is incorrect. To be correct, it should work like the <code>at-tail?</code> model function. Problem example:

<pre>
a: [1 2 3]
b: skip a 2
clear a
same? b tail b ; == false
tail? b ; == true
</pre>

===Is a series empty?===

Comparing the <code>is-empty?</code> model function and the <code>empty?</code> function in Rebol 2.7.8 we find out that

<pre>
empty? #[block! [] -1] ; == false
</pre>

, while the <code>is-empty?</code> model function would yield <code>true</code>.

In Rebol 2.101.0 the <code>empty?</code> function appears to be equivalent to the <code>is-empty?</code> model function.

===How long a series is?===

The <code>length?</code> function in the Rebol 2.7.8 interpreter does not work like the <code>length-of</code> model function as this test demonstrates:

<pre>
length? #[block! [] -2] ; == 3
</pre>

, while the <code>length-of</code> model function yields 0 in such case.

In Rebol 2.101.0 the <code>length?</code> function appears to be equivalent to the <code>length-of</code> model function.

===What is the offset between two series?===

The main difference between the <code>offset-of</code> model function and the standard <code>offset?</code> function in Rebol 2.7.8 is that there are series for which the <code>offset?</code> function does not work due to overflow:

<pre>
>> a: #[block! [1 2] -2147483646] none
>> offset? tail a a
** Math Error: Math or number overflow
** Where: offset?
** Near: subtract index? series2 index? series1
</pre>

The overflow does not occur in Rebol 2.101.0.

===Indexing===

The simplest index arithmetic compatible with the mathematical model of Rebol series is the one used in the above <code>pickz</code> function. In fact, it looks as the only indexing method compatible with the usage of both positive and negative integers for indexing purposes: When traversing from positive numbers to negative or vice versa, we always traverse through 0. An attempt to take the overly complicated, overflow- and bug-ridden indexing functions available in Rebol 2.7.8 and define, e.g., the <code>pickz</code> function on top of them does not make sense.

Any indexing trying to excommunicate zero from indexing continuing to use both positive and negative numbers is asking for trouble, making an obvious gotcha that caught not just ordinary users, but, verifiably, also Rebol designer.

Some particular questions worth discussing are:

====Does Rebol have 1-based indexing?====

Unsurprisingly, the answer is "yes".

'''Example:'''

<pre>
block: [a b]
pick block 1 ; == a
pick block 2 ; == b
</pre>

====Is Rebol indexing 1-based?====

Perhaps surprisingly, the answer is "no".

'''Example:'''

<pre>
index? block: #[block! [a b] 0] ; == 0
pick block 2 ; == a
pick block 3 ; == b
</pre>

As we use indices from the <code>2 <= index < 4</code> range to pick the values of the <code>block</code>, we are actually using 2-based indexing.

====Does Rebol have 0-based indexing?====

Rebol 2.100.111 actually does.

'''Example:'''

<pre>
block: #[block! [a b] 2]
pick block 0 ; == a
pick block 1 ; == b
</pre>

, i.e., we are using indices in the <code>0 <= index < 2</code> range to pick the values of the block, which means that we are using 0-based indexing.

However, Rebol 2.7.8 does not have 0-based indexing:

<pre>
block: #[block! [a b] 2]
pick block -1 ; == a
pick block 1 ; == b
</pre>

, i.e., in this case, the index range consists of two segments, in fact. The first is the segment containing just -1, and using -1-based indexing, while the second is the segment containing just 1, and using 1-based indexing. This also demonstrates that Rebol 2.7.8.3.1 does not have true -1-based (or negative-based) indexing.

Why this happened to Rebol 2.7.8? The main reason seems to be the "1 pointing at the current position" indexing. The common indexing principle assigns the previous position the previous integer number (only if this predecessor/successor relation is kept, index arithmetic really exists), and since 1 points at the current position, this enforces unusual "0 points backwards" indexing. "0 pointing backwards" looks unusual and unexpected, which is the probable reason why 0 was removed from the set of possible index values. However, this is like using smell of garlic to take away the smell of onion, since hurting the index arithmetic this way is not just incomfortable and unexpected as the "0 pointing backwards" was, it is inconsistent. Even the Rebol designer fell victim to this gotcha.

====Indexing inconsistencies====

* In Rebol 2.7.8 the <code>index?</code> function violates the principle of one to one correspondence between indices and positions, because it assigns the tail index to all past-tail positions. In Rebol 2.100.111 this has been corrected.
* In both Rebol 2.7.8 and Rebol 2.100.111, the <code>at</code> function violates the principle of one to one correspondence between indices and positions, becayuse it assigns the same series position to two different indices: 0 and 1.
* In Rebol 2.7.8 the <code>pick</code> function subdivides its range to two arithmetically incompatible segments, effectively destroying index arithmetic. This has been corrected in Rebol 2.100.111.
* In Rebol 2.100.111 the index 0 "points backwards" when the <code>pick</code> function is used. This is not an inconsistency, but it contradicts the expectations of users unaccustomed to the "0 pointing backwards" case.

====Index arithmetic primer====

'''Task:'''

Define a <code>head-index?</code> function obtaining a series <code>s</code> and an index value <code>i</code> yielding an index value <code>j</code> such that the <code>pick s i</code> expression will be equivalent to the <code>pick head s j</code> expression in Rebol 2.7.8. Do not forget to reflect all overflows, bugs, etc.

I recommed everybody wanting to keep the current indexing to try to solve this task and compare his solution to the above <code>payload-index</code> function to make sure he knows how the indexing works.
