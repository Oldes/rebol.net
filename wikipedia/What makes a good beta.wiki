<TABLE width="600"><TR><TD>
''Last year of development of R3 has shown us we are moving forward in a steadily pace. Even if R3 seems to be much more precisely defined, and contains strategic architecture changes and some nice new features, the community is not giving R3 much of an attention. A "wait and see" strategy? Or does R3 still lacks anything fundamental for devs to switch to the next generation of Rebol? Let's find out ... what defines a good beta ...
''

== A definition? ==

From [http://en.wikipedia.org/wiki/Beta_version#Beta Wikipedia]:

<pre>
Beta level software generally includes all features, but may also include known issues and bugs of a less serious variety.
</pre>

As we can see, by definition, beta software should basically contain all [http://rebol.com/r3/docs/project.html planned] features. Yet I can bet, for example tasking is not going to make it for a beta. Don't ask me why, this is just my analytical guess at current situation. 

Living close to the R3 development effort, I have noticed, that we are somehow rushing towards beta. That is understandable - it might be better to limit target feature-set, release REAL product after all those years of waiting, and to add missing features in upcoming milestones (3.1, 3.2, etc.). After all, this is also how KDE folks did it with 4.x, right?

So why do I think there's still something wrong here?

== Wrong attitude towards finishind R3? ==

The whole world is preaching open source mantra. They preach so loudly, that even Rebol creator probably started to believe, that giving open-source capabilities to the mighty Rebol community might somehow magically fix our situation. But this is imo wrong. Not in its absolute sense, but wrong in our current situation. So here we go:

Taken from the [http://rebol.com/r3/docs/project.html Project plan] description:

<pre>
"Also, this list is only for R3 core operation and does not include community-based projects such as graphics, GUI, protocols, documentation,
 and other features that can be developed externally, depending on the needs of the community."
</pre>

Rebol Technologies is the product owner. And as such, RT should assure, those things get delivered, but this is not happening.

== Threats - what might not get delivered? ==

* R3 port model is stable for at least 2 years. Yet there was no single enhancement to '''networking protocols''' coming from the community, to fix the situation. Why are people screaming for stuff being open-sourced, when they actually do not care to contribute? It doesn't matter. All that does matter is - it is not done yet!

* Those paying attention could also notice, that Rebol Technologies also sends '''tasking''' to the same group of ''"might be delivered by the community one day"'' features group. Why I have just a bad feeling, that it all just means freeing a hands of a busy man (Rebol Technologies), but without any sign of the project coordination? Yes, I believe, that some people are able to experiment with various tasking/threading models. But - do we really want to be dependant upon such work being ever delivered by anyone from the community, if noone touched networking protocols in 2 years? This is really a fundamental part of R3, and as for me, I would expect such feature being delivered or at least defined/outlined by the creator of the first multitasking OS - AmigaOS, Carl Sassenrath himself.

* Ditto for the '''GUI'''. Yes, devs can go into their caves, and come-up to the surface with some cool stuff. But the project still needs an organisation. It needs a proposal. I really liked how we did it with [http://www.rebol.net/wiki/Parse_Project Parse project], and so I set-up [http://www.rebol.net/wiki/View_Project View project] page some time ago.

== How to deliver? ==

There is several ways of how to deliver the development:

* RT implements particular feature themselves
* RT contracts developer to implement the feature
* RT asks community to implement it (bounties/sponsoring could be used)

Being it one way or the other, I still think that '''RT has to keep those things unders supervision'''. RT should either do a project management themselves, or set-up a leader from the community for particular project, which reports to RT. Without such an aproach, we put ourselves in a risk to end-up like with networking protocols - everyone could do it, yet noone did it.

== What will most probably happen? ==

We succesfully fixed many things - all our communication channels we have (ML, AltME, wiki, 2 blogs, R3 Chat, CureCode), Carl paying attention to our suggestions. That's all nice.

But the project organisation is still kind of chaotic. I think that people don't change much over time. Not one of us. Nor will Carl. He is most productive hiding himself in the cave, and coming up with some new feature or concept. So what will imo happen is:

* '''RT marks some A1xx release as being a beta. It will not mean much - it will just change a sticker from alpha to beta.'''
* '''Such beta will miss some of features, which many people will regard being fundamental in order to move to R3 on a daily usage basis'''
* '''R3 gets of course developed further, in current pace, which is nice - almost 80 tickets a month implemented'''
* '''We might start to receive first submissions due to Host release + Extensions'''

== Two general most fundamental things ==

# '''Host source code release along with proposed Extensions enhancement - this will free RT's hands a bit, and allow community to experiment with the platform extensions. Some of them might be accepted into official distro.'''
# '''Beta feature set - we need to move devs to use beta on a daily basis. So what defines a good beta then?'''

== Is R3 ready for beta? Why are not users already using it then? ==

I mentioned some organisational aspects of the project I worry about. But let them sleep for now, because most probably we can't change much about it. What I do really worry about is a feature-set of a beta.

I think that R3, as a language, is in more mature state than R2. The language - its semantics - is much better defined, especially in regards to datatypes and their transitions, we have also got some very cool new features inside and overall architecture is now closer to being an OS, than just a language interpreter. 

So why do I worry about the feature set of the beta? Why is not Rebol community using R3 yet? Does placing a "This is a beta" sticker make the product or situation any better? I think - not ...

<pre>
'''If we want developers to move to R3, we have to at least provide them with R2 level features! So where do we stand?'''
</pre>

== Networking protocols (schemes) ==

With R2, I can send and receive email, access ftp, access http, use proxy, albeit a bit limited. What have we got with R3 so far is http protocol, which is not even finished. I should note, that the area is being adressed right now by one community member, but I really want to release R3 with the following protocols (the minimum):

*'''http'''
*'''ftp'''
*'''pop3'''
*'''smtp'''
* ... proxy support, if possible ...

In the future I propose something like Uniserve multiprotocol/multiservice/multiplexing engine to be default part of R3.

== DB access ==

With the move to R3 we lost MySQL and PostgreSQL protocols, as those were not ported yet. The same goes for the SQLite. Please don't mention ODBC in your eventual comments - we are talking minimal feature set, to allow R2 devs to move to R3. ODBC is part of the SDK release, and it will be covered in [http://www.rebol.net/wiki/Rebol_adoption Rebol adoption] document. As a minimal feature set for R3, I do regard not having the following two fundamentals:

*'''MySQL'''
*'''SQLite''' (how to get this one is more tricky - we have no DLL interface in R3, so it has to be done by Extension mechanism, or wrapping command line sqlite.exe)

== CGI ==

CGI got fixed on Windows in the meantime I suggested that this be a crucial feature too. But - R3 is lacking decode-cgi and read-cgi functions (with once again a strange attitude to me) - "it can be added as a module" - yes, it can, and maybe it happens in 100 years. Nothing against modules - but this one has to come with default distro imo ...

== Console ==

First we removed R2 console, in order to allow admins to use R3 via SSH/Telnet/Serial line connections. But then we [http://www.rebol.net/cgi-bin/r3blog.r?view=0282#comments failed] to do so. Now it seems to be clear, that separate host build will be needed for such purposes. But in such a case, when I can't use e.g. Console2 instead of default Windows black crap, which even does not deserve being called a console, my Rebol experience is ruined by something like 20-30% - no kidding. That ugly thing can't be properly resized, not to mention R3 does not support multiline editing there. So:

*'''Add R2 kind of console to R3 host for Windows'''

== Shell ==

Shell is an easy deployment tool. It can be even used to wrap some DBs by calling their particular executables. R3 shell is pretty much [http://curecode.org/rebol3/ticket.rsp?id=1223&cursor=22 broken]. I really don't care if it is more low level and more right, if I can't do two fundamental things:

*'''Ability to trap 'call/output into variable'''
*'''Ability to 'call/wait for the output''' (call "cmd /c start /wait excel" does not wait)

== Unicode ==

So we have got Unicode. But I have never heard any word about:

*'''Unicode aware sorting supporting collations'''

I might be forgiving, not having this one for initial beta, but not previous categories ...

== The ending ==

As you can see, I have clearly identified and named few categories, which are imo fundamental for devs in order to even start considering porting their apps to R3. We are not even talking full R2 level of completeness here - no mention of View, no mention of the SDK advanced features (https, odbc). 

Such stuff is saved for the [http://www.rebol.net/wiki/Rebol_adoption next doc], talking about Rebol adoption, and what should be done here. So far, I can say only two words here - '''easy deployment'''.

= Comments =

You can put your comments here:

</TD></TR></TABLE>