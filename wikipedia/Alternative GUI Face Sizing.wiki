Posted by Henrik Mikael Kristensen, 19-Mar-2009

NOTE: This is an unfinished document. More work will not be done until Carl has revised the R3 GUI resizing issues, to see whether this will be relevant at all.

=Goals=

===Predictability===

In Rebol 3, as long as we don't have a graphical editor for creating layouts, it's very important to have some sense of how your layout will work in your head.

===Simplicity in Layout===

The layout dialect must remain simple and so we must articulate placement, sizes and resize information in as many subtexts as possible.

===Simplicity in Model===

By keeping a simple model, its easier to keep in your head and easier to write in code.

=Effects=

The model will present layouts that scale in a simple fashion without accordion effects. In a sense, this appears similar to how MacOSX resizes, but it allows you to make springs affect faces and push them around in ways the OSX model can't do. Thus it can't be compared directly to the OSX resize model.

=Model=

#The model relies on '''size''' and '''pressure'''. For all cases, we treat X and Y separately and identically, so below, only the horizontal resize model is described.
#'''Style size''' is the size specified or calculated inside the style.
#'''Face size''' is the size calculated by the layout engine.
#A face can be specified by a size (integer!) and a spring (logic!).
#If the spring is OFF, and the style size is 400, the face size will be 400 and is not determined or changed by the layout engine.
#If the spring is ON, and the style size is 400, the face size will be determined by the layout engine. The calculation would then be made based on how many faces are present in the group and how many faces have spring information and how many that don't have spring information.
#The style size is only specified in the style, but it can be specified in the style itself by hand, or be calculated within the style. This means that a style can calculate its face size, based on the amount of text in it, for example. You can also create a user input to adjust the face size, for example through a dragger, that resizes the face, such as when resizing a sidebar. Style size calculation never happens outside the style.
#Style size and spring are both specified separately for X and Y orientation.
#A style relates to its parent by using the face size of the parent, regardless of whether the parent has spring information or not.
#Limit: A spring should not result in a negative face size.
#Limit: The minimum size of a group of faces should be the sum of their style sizes. When the face is a spring, the minimum size is 0.

=Failures=

Places where it would definitely fail. Needs to be written.

=Scenarios=

N = fixed size face
W = Spring face

In the first scenarios we only look at one direction.

==Scenario 1, single Ns don't scale and Ws scale evenly==

<pre>
1. |[N]  |

2. |[N]          |

3. |[ W ]|

4. |[     W     ]|
</pre>

Notice that the W in the bottom example scales to the entire width of the group.

==Scenario 2, multiple Ns don't scale and Ws scale evenly==

<pre>
1. |[N][N] |

2. |[N][N]       |

3. |[ W ][ W ]|

4. |[   W   ][   W   ]|
</pre>

Here it's important to notice that spring faces scale evenly, so two spring faces next to eachother will be divided evenly in size.

==Scenario 3, an N is pushed to an edge by a W==

<pre>
1. |[N][  W  ]|

2. |[N][      W      ]|

3. |[  W  ][N]|

4. |[      W      ][N]|
</pre>

Spring faces scale and push non-spring faces as far as possible. This allows a simple way to right-align a face.

==Scenario 4, pushing from center to corners and vice versa==

<pre>
1. |[N][ W ][N]|

2. |[N][    W    ][N]|

3. |[ W ][N][ W ]|

4. |[   W   ][N][   W   ]|
</pre>

==Scenario 5, even distribution of Ws and Ns==

<pre>
1. |[N][ W ][N][ W ][N]|

2. |[N][    W    ][N][    W    ][N]|

3. |[ W ][N][ W ][N][ W ]|

4. |[   W   ][N][   W   ][N][   W   ]|
</pre>

This is something the OSX model can't do.

==Scenario 6, uneven distribution of Ws and Ns==

<pre>
1. |[N][ W ][ W ][N][ W ][N]|

2. |[N][    W    ][    W    ][N][    W    ][N]|

3. |[ W ][N][N][ W ][N][ W ]|

4. |[   W   ][N][N][   W   ][N][   W   ]|
</pre>

An example of using two pads to push twice as hard.

==Scenario 7, small N above a W and vice versa==

<pre>
1. |[N]|
   |[W]|

2. |[N]        |
   |[    W    ]|
   |[    N    ]|
</pre>

The group resizes according to the largest fixed face, which is the sum of all faces in a given direction.

==Scenario 8, big N above a W

<pre>
2. |[  N  ]    |
</pre>

==Scenario 9, various combinations==

<pre>
1. +-----------------------------------------------+
   |[                  W                 ][   N   ]|
   +-----------------------------------------------+
   |[  N  ]|+-------------------------------------+|
   |+-----+||                                     ||
   ||     |||                                     ||
   ||  W  |||                  W                  ||
   ||     |||                                     ||
   |+-----+||                                     ||
   ||     |||                                     ||
   ||  W  ||+-------------------------------------+|
   ||     |||[ N ][          W         ][ N ][ N ]||
   |+-----+|+-------------------------------------+|
   +-----------------------------------------------+
   |[ N ][       W      ][ N ][      W       ][ N ]|
   +-----------------------------------------------+
</pre>

=Dialect=

A typical layout scheme would not need any spring information, since the styles would be well designed and all size reasonably. The standard for a BUTTON would be not to spring and a standard FIELD would spring horizontally.

<pre>
view [
  message "Quit Program?"
  group [
    button "Yes"
    button "No"
  ]
]
</pre>

In the above example, the MESSAGE face is sitting alone in its X direction, the window has no size attached and thus, the style size is used to calculate the face size. The group below also has a horizontal spring and scales identically to the width of the parent.
When the window resizes, the MESSAGE face scales accordingly. The group in which the buttons reside, also resizes, but the buttons do not. It can be a price to pay to add a PAD here, but you need to do that anyway in the current R3 GUI. Behavior is still predictable.

So to make the buttons move properly as the layout is resized in the window, add a PAD:

<pre>
group [
  button "Yes"
  pad
  button "No"
]
</pre>

or if you want the buttons to stretch evenly in the group:

<pre>
group [
  button spring-x "Yes"
  button spring-x "No"
]
</pre>

Since there would be no vertical spring information, the buttons will stay the same height, when the window is resized.

A more complex example:

<pre>
view [
  title "Enter Information"
  bar
  group 2 [
    label "Name"
    field
    label "Address"
    field
    label "Age"
    field
  ]
  bar
  group [
    button "Send"
    pad
    button "Cancel"
  ]
]
</pre>

This example demonstrates more importance in how styles would be already designed to be spring or fixed sized. Bars and fields would be spring, while label would be fixed. And while label is fixed, it also scales appropriately internally, before it's drawn, so you don't risk wrapped lines or truncated text.

=Window Resizing=

There should be restrictions on window resizing, based on internal face information for sizes. Write this part later.